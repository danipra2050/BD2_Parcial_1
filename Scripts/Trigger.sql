--CREATE VIEW vwEMPLOYEEAUDIT AS
SELECT		EMPLOYEE.EMPLOYEEID, EMPLOYEE.FULLNAME, BRANCHOFFICE.NAME AS BRANCHNAME, DEPARTMENT.NAME AS DEPARTMENTNAME,
			SUPERVISOR.FULLNAME AS SUPERVISORNAME, POSITION.NAME AS POSITIONNAME, CONCAT(ADDRESS.LINE1, ' ', ADDRESS.LINE2) AS ADDRESS,
			CITY.NAME AS CITYNAME, COUNTRY.NAME AS COUNTRYNAME
FROM		EMPLOYEE
INNER JOIN	BRANCHOFFICE
ON			EMPLOYEE.BRANCHID = BRANCHOFFICE.BRANCHID
AND			BRANCHOFFICE.BRANCHID = 4
INNER JOIN 	DEPARTMENT
ON			EMPLOYEE.DEPARTMENTID = DEPARTMENT.DEPARTMENTID
AND			DEPARTMENT.DEPARTMENTID = 10
INNER JOIN 	POSITION
ON			EMPLOYEE.POSITIONID = POSITION.POSITIONID
INNER JOIN 	ADDRESS
ON			EMPLOYEE.ADDRESSID = ADDRESS.ADDRESSID
LEFT JOIN 	EMPLOYEE AS SUPERVISOR
ON			SUPERVISOR.EMPLOYEEID = EMPLOYEE.SUPERVISORID
INNER JOIN 	CITY
ON			ADDRESS.CITYID = CITY.CITYID
INNER JOIN	COUNTRY
ON			CITY.COUNTRYID = COUNTRY.COUNTRYID;

/**
* FUNCION QUE PERSISTE LA TABLA DE AUDITORIA
*/
CREATE OR REPLACE FUNCTION fncEmployeeAudit()
	RETURNS TRIGGER
	LANGUAGE PLPGSQL
	AS
	$$ DECLARE
		varEmployeeId INT;
		varFullName VARCHAR(100);
		varSupervisor VARCHAR(100);
		varBranch VARCHAR(50);
		varDepartment VARCHAR(30);
		varPosition VARCHAR(30);
		varAddress VARCHAR(50);
		varCity VARCHAR(30);
		varCountry VARCHAR(30);
	BEGIN
		
		varEmployeeId := CASE WHEN TG_OP = 'INSERT' THEN NEW.EMPLOYEEID ELSE OLD.EMPLOYEEID END;
		varFullName := CASE WHEN TG_OP = 'INSERT' THEN NEW.FULLNAME ELSE OLD.FULLNAME END;
		SELECT FULLNAME INTO varSupervisor FROM EMPLOYEE WHERE EMPLOYEEID = CASE WHEN TG_OP = 'INSERT' THEN NEW.SUPERVISORID ELSE OLD.SUPERVISORID END;
		SELECT NAME INTO varBranch FROM BRANCHOFFICE WHERE BRANCHID = CASE WHEN TG_OP = 'INSERT' THEN NEW.BRANCHID ELSE OLD.BRANCHID END;
		SELECT NAME INTO varDepartment FROM DEPARTMENT WHERE DEPARTMENTID = CASE WHEN TG_OP = 'INSERT' THEN NEW.departmentid ELSE OLD.departmentid END;
		SELECT NAME INTO varPosition FROM POSITION WHERE POSITIONID = CASE WHEN TG_OP = 'INSERT' THEN NEW.positionid ELSE OLD.positionid END;
		SELECT  CONCAT(ADDRESS.LINE1, ' ', ADDRESS.LINE2) INTO varAddress FROM ADDRESS WHERE ADDRESSID = CASE WHEN TG_OP = 'INSERT' THEN NEW.addressid ELSE OLD.addressid END;
		SELECT 		CITY.NAME, COUNTRY.NAME
		INTO		varCity, varCountry
		FROM 		ADDRESS
		INNER JOIN	CITY
		ON			ADDRESS.CITYID = CITY.CITYID
		INNER JOIN 	COUNTRY
		ON			CITY.COUNTRYID = COUNTRY.COUNTRYID
		WHERE 		ADDRESS.ADDRESSID = CASE WHEN TG_OP = 'INSERT' THEN NEW.addressid ELSE OLD.addressid END;
		
		IF (NEW.SUPERVISORID IS NOT NULL OR OLD.SUPERVISORID IS NOT NULL) THEN
			SELECT FULLNAME INTO varSupervisor FROM EMPLOYEE WHERE EMPLOYEEID = CASE WHEN TG_OP = 'INSERT' THEN NEW.SUPERVISORID ELSE OLD.SUPERVISORID END;
		END IF;
	
		INSERT INTO EMPLOYEEAUDIT
					(EMPLOYEEID, FULLNAME, BRANCHOFFICE, DEPARTMENT, SUPERVISOR, POSITION, ADDRESS, CITY, COUNTRY, EVENT, REGISTEREDAT)
				VALUES
					(varEmployeeId, varFullName, varBranch, varDepartment, varSupervisor, varPosition, varAddress, varCity, varCountry, TG_OP, NOW());		
		
		RETURN NEW;
	END;
$$;

/**
* CREACION DEL TRIGGER
*/
DROP TRIGGER IF EXISTS trgEmployeeAudit ON EMPLOYEE;
CREATE TRIGGER trgEmployeeAudit
	AFTER INSERT OR UPDATE OR DELETE ON EMPLOYEE
	FOR EACH ROW
	EXECUTE PROCEDURE fncEmployeeAudit();
	
INSERT INTO EMPLOYEE (EMPLOYEEID, FULLNAME, BRANCHID, DEPARTMENTID, POSITIONID, ADDRESSID, SUPERVISORID) VALUES
					(73167330, 'SIMANCA JARVIN', 4, 9, 4, 3, 1129583111);
					
UPDATE	EMPLOYEE
SET		SUPERVISORID = 1044422199
WHERE 	EMPLOYEEID = 73167330;